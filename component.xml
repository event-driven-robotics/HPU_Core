<?xml version="1.0" encoding="UTF-8"?>
<spirit:component xmlns:xilinx="http://www.xilinx.com" xmlns:spirit="http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <spirit:vendor>IIT</spirit:vendor>
  <spirit:library>IIT_lib</spirit:library>
  <spirit:name>HPU_Core</spirit:name>
  <spirit:version>4.0</spirit:version>
  <spirit:busInterfaces>
    <spirit:busInterface>
      <spirit:name>M_AXIS</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="axis" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="axis_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TDATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>M_AXIS_TDATA</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TLAST</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>M_AXIS_TLAST</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TVALID</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>M_AXIS_TVALID</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TREADY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>M_AXIS_TREADY</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>S_AXIS</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="axis" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="axis_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TDATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>S_AXIS_TDATA</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TLAST</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>S_AXIS_TLAST</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TVALID</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>S_AXIS_TVALID</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TREADY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>S_AXIS_TREADY</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>S_AXI</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="aximm" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="aximm_rtl" spirit:version="1.0"/>
      <spirit:slave>
        <spirit:memoryMapRef spirit:memoryMapRef="S_AXI"/>
      </spirit:slave>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>AWADDR</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>S_AXI_AWADDR</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>AWVALID</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>S_AXI_AWVALID</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>AWREADY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>S_AXI_AWREADY</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>WDATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>S_AXI_WDATA</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>WSTRB</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>S_AXI_WSTRB</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>WVALID</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>S_AXI_WVALID</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>WREADY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>S_AXI_WREADY</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>BRESP</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>S_AXI_BRESP</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>BVALID</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>S_AXI_BVALID</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>BREADY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>S_AXI_BREADY</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>ARADDR</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>S_AXI_ARADDR</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>ARVALID</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>S_AXI_ARVALID</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>ARREADY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>S_AXI_ARREADY</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RDATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>S_AXI_RDATA</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RRESP</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>S_AXI_RRESP</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RVALID</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>S_AXI_RVALID</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RREADY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>S_AXI_RREADY</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>S_AXI_ARESETN</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="reset" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="reset_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RST</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>S_AXI_ARESETN</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>POLARITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.S_AXI_ARESETN.POLARITY" spirit:choiceRef="choice_list_9d8b0d81">ACTIVE_LOW</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>INTERRUPT</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>INTERRUPT</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>Interrupt_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>SENSITIVITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.INTERRUPT.SENSITIVITY" spirit:choiceRef="choice_list_99a1d2b9">LEVEL_HIGH</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>AXIS_CLK</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>CLK_AXIS_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.AXIS_CLK.ASSOCIATED_BUSIF">M_AXIS:S_AXIS</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.AXIS_CLK.FREQ_HZ"/>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.AXIS_CLK.ASSOCIATED_RESET">CLEAR_N_i</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>PAER_TX</spirit:name>
      <spirit:busType spirit:vendor="iit.local" spirit:library="user" spirit:name="paer" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="iit.local" spirit:library="user" spirit:name="paer_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>ACK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>Tx_PAER_Ack_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>EVENT_ADDR</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>Tx_PAER_Addr_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>REQ</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>Tx_PAER_Req_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.PAER_TX" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TX_HAS_PAER&apos;)) = true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>PAER_RX_LEFT</spirit:name>
      <spirit:busType spirit:vendor="iit.local" spirit:library="user" spirit:name="paer" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="iit.local" spirit:library="user" spirit:name="paer_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>ACK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LRx_PAER_Ack_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>EVENT_ADDR</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LRx_PAER_Addr_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>REQ</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LRx_PAER_Req_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.PAER_RX_LEFT" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_HAS_PAER&apos;)) = true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>PAER_RX_RIGHT</spirit:name>
      <spirit:busType spirit:vendor="iit.local" spirit:library="user" spirit:name="paer" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="iit.local" spirit:library="user" spirit:name="paer_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>ACK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>RRx_PAER_Ack_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>EVENT_ADDR</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>RRx_PAER_Addr_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>REQ</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>RRx_PAER_Req_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.PAER_RX_RIGHT" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_HAS_PAER&apos;)) = true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>PAER_RX_AUX</spirit:name>
      <spirit:busType spirit:vendor="iit.local" spirit:library="user" spirit:name="paer" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="iit.local" spirit:library="user" spirit:name="paer_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>ACK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ARx_PAER_Ack_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>EVENT_ADDR</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ARx_PAER_Addr_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>REQ</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ARx_PAER_Req_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.PAER_RX_AUX" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_A_HAS_PAER&apos;)) = true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>M_RX_INTERCEPTION_RIGHT</spirit:name>
      <spirit:busType spirit:vendor="iit.local" spirit:library="user" spirit:name="handshake" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="iit.local" spirit:library="user" spirit:name="handshake_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TDATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>RRxData_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TVALID</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>RRxSrcRdy_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TREADY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>RRxDstRdy_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.M_RX_INTERCEPTION_RIGHT" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_INTERCEPTION&apos;)) = true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>S_RX_INTERCEPTION_RIGHT</spirit:name>
      <spirit:busType spirit:vendor="iit.local" spirit:library="user" spirit:name="handshake" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="iit.local" spirit:library="user" spirit:name="handshake_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TDATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>RRxBypassData_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TVALID</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>RRxBypassSrcRdy_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TREADY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>RRxBypassDstRdy_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.S_RX_INTERCEPTION_RIGHT" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_INTERCEPTION&apos;)) = true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>M_RX_INTERCEPTION_LEFT</spirit:name>
      <spirit:busType spirit:vendor="iit.local" spirit:library="user" spirit:name="handshake" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="iit.local" spirit:library="user" spirit:name="handshake_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:connectionRequired>true</spirit:connectionRequired>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TDATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LRxData_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TVALID</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LRxSrcRdy_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TREADY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LRxDstRdy_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.M_RX_INTERCEPTION_LEFT" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_INTERCEPTION&apos;)) = true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>S_RX_INTERCEPTION_LEFT</spirit:name>
      <spirit:busType spirit:vendor="iit.local" spirit:library="user" spirit:name="handshake" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="iit.local" spirit:library="user" spirit:name="handshake_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TDATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LRxBypassData_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TVALID</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LRxBypassSrcRdy_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TREADY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LRxBypassDstRdy_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.S_RX_INTERCEPTION_LEFT" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_INTERCEPTION&apos;)) = true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>M_RX_INTERCEPTION_AUX</spirit:name>
      <spirit:busType spirit:vendor="iit.local" spirit:library="user" spirit:name="handshake" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="iit.local" spirit:library="user" spirit:name="handshake_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TDATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>AuxRxData_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TVALID</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>AuxRxSrcRdy_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TREADY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>AuxRxDstRdy_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.M_RX_INTERCEPTION_AUX" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_A_INTERCEPTION&apos;)) = true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>S_RX_INTERCEPTION_AUX</spirit:name>
      <spirit:busType spirit:vendor="iit.local" spirit:library="user" spirit:name="handshake" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="iit.local" spirit:library="user" spirit:name="handshake_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TDATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>AuxRxBypassData_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TVALID</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>AuxRxBypassSrcRdy_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TREADY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>AuxRxBypassDstRdy_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>NUM_READ_OUTSTANDING</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.S_RX_INTERCEPTION_AUX.NUM_READ_OUTSTANDING"/>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>NUM_WRITE_OUTSTANDING</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.S_RX_INTERCEPTION_AUX.NUM_WRITE_OUTSTANDING"/>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.S_RX_INTERCEPTION_AUX" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_A_INTERCEPTION&apos;)) = true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>TX_MESSAGE</spirit:name>
      <spirit:busType spirit:vendor="iit.local" spirit:library="user" spirit:name="handshake" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="iit.local" spirit:library="user" spirit:name="handshake_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TDATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>Tx_TxGtpMsg_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TVALID</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>Tx_TxGtpMsgSrcRdy_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TREADY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>Tx_TxGtpMsgDstRdy_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.TX_MESSAGE" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TX_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>RX_MESSAGE_LEFT</spirit:name>
      <spirit:busType spirit:vendor="iit.local" spirit:library="user" spirit:name="handshake" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="iit.local" spirit:library="user" spirit:name="handshake_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TDATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LRx_RxGtpMsg_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TVALID</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LRx_RxGtpMsgSrcRdy_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TREADY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LRx_RxGtpMsgDstRdy_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.RX_MESSAGE_LEFT" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_HAS_GTP&apos;)) = true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>RX_MESSAGE_RIGHT</spirit:name>
      <spirit:busType spirit:vendor="iit.local" spirit:library="user" spirit:name="handshake" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="iit.local" spirit:library="user" spirit:name="handshake_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TDATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>RRx_RxGtpMsg_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TVALID</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>RRx_RxGtpMsgSrcRdy_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TREADY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>RRx_RxGtpMsgDstRdy_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.RX_MESSAGE_RIGHT" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_HAS_GTP&apos;)) = true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>RX_MESSAGE_AUX</spirit:name>
      <spirit:busType spirit:vendor="iit.local" spirit:library="user" spirit:name="handshake" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="iit.local" spirit:library="user" spirit:name="handshake_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TDATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ARx_RxGtpMsg_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TVALID</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ARx_RxGtpMsgSrcRdy_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TREADY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ARx_RxGtpMsgDstRdy_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.RX_MESSAGE_AUX" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_A_HAS_GTP&apos;)) = true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>ALIGN_REQUEST_IN</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>Tx_TxGtpAlignRequest_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.ALIGN_REQUEST_IN" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TX_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>ALIGN_FLAG</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>Tx_TxGtpAlignFlag_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.ALIGN_FLAG" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TX_HAS_GTP&apos;)) = true">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>ALIGN_REQUEST_LEFT</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:connectionRequired>true</spirit:connectionRequired>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LRx_RxGtpAlignRequest_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.ALIGN_REQUEST_LEFT" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_HAS_GTP&apos;)) = true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>ALIGN_REQUEST_RIGHT</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>RRx_RxGtpAlignRequest_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.ALIGN_REQUEST_RIGHT" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_HAS_GTP&apos;)) = true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>ALIGN_REQUEST_AUX</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ARx_RxGtpAlignRequest_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.ALIGN_REQUEST_AUX" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_A_HAS_GTP&apos;)) = true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>GTP_TX</spirit:name>
      <spirit:busType spirit:vendor="iit.local" spirit:library="user" spirit:name="gtp_manager" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="iit.local" spirit:library="user" spirit:name="gtp_manager_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>SOFT_RESET_TX</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>Tx_GTP_SoftResetTx_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TXUSRCLK2</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>Tx_GTP_TxUsrClk2_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txuserrdy</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>Tx_GTP_Txuserrdy_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txdata</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>Tx_GTP_Txdata_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>PLLxLOCK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>Tx_GTP_PllLock_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA_VALID</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>Tx_GTP_DataValid_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txcharisk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>Tx_GTP_Txcharisk_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>PLLxREFCLKLOST</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>Tx_GTP_PllRefclklost_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.GTP_TX" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TX_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>GTP_RX_LEFT</spirit:name>
      <spirit:busType spirit:vendor="iit.local" spirit:library="user" spirit:name="gtp_manager" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="iit.local" spirit:library="user" spirit:name="gtp_manager_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdata</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LRx_GTP_Rxdata_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxchariscomma</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LRx_GTP_Rxchariscomma_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbyterealign</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LRx_GTP_Rxbyterealign_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbyteisaligned</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LRx_GTP_Rxbyteisaligned_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>SOFT_RESET_RX</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LRx_GTP_SoftResetRx_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RXUSRCLK2</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LRx_GTP_RxUsrClk2_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>PLLxLOCK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LRx_GTP_PllLock_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcharisk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LRx_GTP_Rxcharisk_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdisperr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LRx_GTP_Rxdisperr_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA_VALID</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LRx_GTP_DataValid_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxuserrdy</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LRx_GTP_Rxuserrdy_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxnotintable</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LRx_GTP_Rxnotintable_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>PLLxREFCLKLOST</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LRx_GTP_PllRefclklost_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>NUM_READ_OUTSTANDING</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.GTP_RX_LEFT.NUM_READ_OUTSTANDING"/>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>NUM_WRITE_OUTSTANDING</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.GTP_RX_LEFT.NUM_WRITE_OUTSTANDING"/>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.GTP_RX_LEFT" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>GTP_RX_RIGHT</spirit:name>
      <spirit:busType spirit:vendor="iit.local" spirit:library="user" spirit:name="gtp_manager" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="iit.local" spirit:library="user" spirit:name="gtp_manager_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdata</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>RRx_GTP_Rxdata_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxchariscomma</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>RRx_GTP_Rxchariscomma_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbyterealign</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>RRx_GTP_Rxbyterealign_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbyteisaligned</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>RRx_GTP_Rxbyteisaligned_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>SOFT_RESET_RX</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>RRx_GTP_SoftResetRx_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RXUSRCLK2</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>RRx_GTP_RxUsrClk2_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>PLLxLOCK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>RRx_GTP_PllLock_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcharisk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>RRx_GTP_Rxcharisk_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdisperr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>RRx_GTP_Rxdisperr_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA_VALID</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>RRx_GTP_DataValid_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxuserrdy</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>RRx_GTP_Rxuserrdy_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxnotintable</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>RRx_GTP_Rxnotintable_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>PLLxREFCLKLOST</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>RRx_GTP_PllRefclklost_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>NUM_READ_OUTSTANDING</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.GTP_RX_RIGHT.NUM_READ_OUTSTANDING"/>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>NUM_WRITE_OUTSTANDING</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.GTP_RX_RIGHT.NUM_WRITE_OUTSTANDING"/>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.GTP_RX_RIGHT" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>GTP_RX_AUX</spirit:name>
      <spirit:busType spirit:vendor="iit.local" spirit:library="user" spirit:name="gtp_manager" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="iit.local" spirit:library="user" spirit:name="gtp_manager_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdata</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ARx_GTP_Rxdata_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxchariscomma</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ARx_GTP_Rxchariscomma_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbyterealign</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ARx_GTP_Rxbyterealign_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbyteisaligned</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ARx_GTP_Rxbyteisaligned_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>SOFT_RESET_RX</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ARx_GTP_SoftResetRx_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RXUSRCLK2</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ARx_GTP_RxUsrClk2_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>PLLxLOCK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ARx_GTP_PllLock_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcharisk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ARx_GTP_Rxcharisk_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdisperr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ARx_GTP_Rxdisperr_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA_VALID</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ARx_GTP_DataValid_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxuserrdy</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ARx_GTP_Rxuserrdy_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxnotintable</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ARx_GTP_Rxnotintable_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>PLLxREFCLKLOST</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ARx_GTP_PllRefclklost_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.GTP_RX_AUX" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_A_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>GTH_RX_LEFT</spirit:name>
      <spirit:busType spirit:vendor="iit.local" spirit:library="user" spirit:name="gth_manager_rx" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="iit.local" spirit:library="user" spirit:name="gth_manager_rx_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>gtwiz_userclk_rx_usrclk2</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LRx_GTH_gtwiz_userclk_rx_usrclk2_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>gtwiz_reset_all</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LRx_GTH_gtwiz_reset_all_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbyteisaligned</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LRx_GTH_Rxbyteisaligned_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxctrl2</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LRx_GTH_Rxctrl2_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxctrl1</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LRx_GTH_Rxctrl1_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxctrl3</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LRx_GTH_Rxctrl3_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbyterealign</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LRx_GTH_Rxbyterealign_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qpll_lock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LRx_GTH_Qpll_lock_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxctrl0</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LRx_GTH_Rxctrl0_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qpll_refclklost</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LRx_GTH_Qpll_refclklost_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>gtwiz_userdata_rx</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LRx_GTH_gtwiz_userdata_rx_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.GTH_RX_LEFT" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynquplus&quot;">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>GTH_RX_RIGHT</spirit:name>
      <spirit:busType spirit:vendor="iit.local" spirit:library="user" spirit:name="gth_manager_rx" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="iit.local" spirit:library="user" spirit:name="gth_manager_rx_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>gtwiz_userclk_rx_usrclk2</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>RRx_GTH_gtwiz_userclk_rx_usrclk2_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>gtwiz_reset_all</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>RRx_GTH_gtwiz_reset_all_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbyteisaligned</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>RRx_GTH_Rxbyteisaligned_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxctrl2</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>RRx_GTH_Rxctrl2_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxctrl1</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>RRx_GTH_Rxctrl1_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxctrl3</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>RRx_GTH_Rxctrl3_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbyterealign</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>RRx_GTH_Rxbyterealign_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qpll_lock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>RRx_GTH_Qpll_lock_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxctrl0</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>RRx_GTH_Rxctrl0_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qpll_refclklost</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>RRx_GTH_Qpll_refclklost_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>gtwiz_userdata_rx</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>RRx_GTH_gtwiz_userdata_rx_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>NUM_READ_OUTSTANDING</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.GTH_RX_RIGHT.NUM_READ_OUTSTANDING"/>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>NUM_WRITE_OUTSTANDING</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.GTH_RX_RIGHT.NUM_WRITE_OUTSTANDING"/>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.GTH_RX_RIGHT" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynquplus&quot;">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>GTH_RX_AUX</spirit:name>
      <spirit:busType spirit:vendor="iit.local" spirit:library="user" spirit:name="gth_manager_rx" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="iit.local" spirit:library="user" spirit:name="gth_manager_rx_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>gtwiz_userclk_rx_usrclk2</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ARx_GTH_gtwiz_userclk_rx_usrclk2_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>gtwiz_reset_all</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ARx_GTH_gtwiz_reset_all_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbyteisaligned</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ARx_GTH_Rxbyteisaligned_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxctrl2</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ARx_GTH_Rxctrl2_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxctrl1</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ARx_GTH_Rxctrl1_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxctrl3</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ARx_GTH_Rxctrl3_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbyterealign</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ARx_GTH_Rxbyterealign_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qpll_lock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ARx_GTH_Qpll_lock_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxctrl0</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ARx_GTH_Rxctrl0_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>qpll_refclklost</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ARx_GTH_Qpll_refclklost_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>gtwiz_userdata_rx</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ARx_GTH_gtwiz_userdata_rx_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.GTH_RX_AUX" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_A_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynquplus&quot;">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>HSSAER_TX</spirit:name>
      <spirit:busType spirit:vendor="iit.local" spirit:library="user" spirit:name="hssaer" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="iit.local" spirit:library="user" spirit:name="hssaer_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>HSSAER</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>Tx_HSSAER_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.HSSAER_TX" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TX_HAS_HSSAER&apos;)) = true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>HSSAER_RX_LEFT</spirit:name>
      <spirit:busType spirit:vendor="iit.local" spirit:library="user" spirit:name="hssaer" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="iit.local" spirit:library="user" spirit:name="hssaer_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:connectionRequired>true</spirit:connectionRequired>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>HSSAER</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LRx_HSSAER_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.HSSAER_RX_LEFT" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_HAS_HSSAER&apos;)) = true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>HSSAER_RX_RIGHT</spirit:name>
      <spirit:busType spirit:vendor="iit.local" spirit:library="user" spirit:name="hssaer" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="iit.local" spirit:library="user" spirit:name="hssaer_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>HSSAER</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>RRx_HSSAER_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.HSSAER_RX_RIGHT" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_HAS_HSSAER&apos;)) = true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>HSSAER_RX_AUX</spirit:name>
      <spirit:busType spirit:vendor="iit.local" spirit:library="user" spirit:name="hssaer" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="iit.local" spirit:library="user" spirit:name="hssaer_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>HSSAER</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ARx_HSSAER_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.HSSAER_RX_AUX" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_A_HAS_HSSAER&apos;)) = true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>CLK_CORE</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>CLK_CORE_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.CLK_CORE.ASSOCIATED_BUSIF">S_AXI</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>SPINNLINK_TX</spirit:name>
      <spirit:busType spirit:vendor="iit.local" spirit:library="user" spirit:name="SpiNNlink" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="iit.local" spirit:library="user" spirit:name="SpiNNlink_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>Lout</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>Tx_SPNN_Data_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>LoutAck</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>Tx_SPNN_Ack_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.SPINNLINK_TX" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TX_HAS_SPNNLNK&apos;)) = true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>SPINNLINK_RX_LEFT</spirit:name>
      <spirit:busType spirit:vendor="iit.local" spirit:library="user" spirit:name="SpiNNlink" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="iit.local" spirit:library="user" spirit:name="SpiNNlink_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>Lin</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LRx_SPNN_Data_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>LinAck</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LRx_SPNN_Ack_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>NUM_READ_OUTSTANDING</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.SPINNLINK_RX_LEFT.NUM_READ_OUTSTANDING"/>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>NUM_WRITE_OUTSTANDING</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.SPINNLINK_RX_LEFT.NUM_WRITE_OUTSTANDING"/>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.SPINNLINK_RX_LEFT" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_HAS_SPNNLNK&apos;)) = true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>SPINNLINK_RX_RIGHT</spirit:name>
      <spirit:busType spirit:vendor="iit.local" spirit:library="user" spirit:name="SpiNNlink" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="iit.local" spirit:library="user" spirit:name="SpiNNlink_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>Lin</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>RRx_SPNN_Data_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>LinAck</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>RRx_SPNN_Ack_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.SPINNLINK_RX_RIGHT" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_HAS_SPNNLNK&apos;)) = true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>SPINNLINK_RX_AUX</spirit:name>
      <spirit:busType spirit:vendor="iit.local" spirit:library="user" spirit:name="SpiNNlink" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="iit.local" spirit:library="user" spirit:name="SpiNNlink_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>Lin</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ARx_SPNN_Data_i</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>LinAck</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ARx_SPNN_Ack_o</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.SPINNLINK_RX_AUX" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_A_HAS_SPNNLNK&apos;)) = true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
  </spirit:busInterfaces>
  <spirit:memoryMaps>
    <spirit:memoryMap>
      <spirit:name>S_AXI</spirit:name>
      <spirit:addressBlock>
        <spirit:name>reg0</spirit:name>
        <spirit:baseAddress spirit:format="bitString" spirit:resolve="user" spirit:bitStringLength="32">0</spirit:baseAddress>
        <spirit:range spirit:format="long" spirit:resolve="dependent" spirit:dependency="pow(2,(spirit:decode(id(&apos;MODELPARAM_VALUE.C_S_AXI_ADDR_WIDTH&apos;)) - 1) + 1)" spirit:minimum="4096" spirit:rangeType="long">4096</spirit:range>
        <spirit:width spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_S_AXI_DATA_WIDTH&apos;)) - 1) + 1">32</spirit:width>
        <spirit:usage>register</spirit:usage>
      </spirit:addressBlock>
    </spirit:memoryMap>
  </spirit:memoryMaps>
  <spirit:model>
    <spirit:views>
      <spirit:view>
        <spirit:name>xilinx_anylanguagesynthesis</spirit:name>
        <spirit:displayName>Synthesis</spirit:displayName>
        <spirit:envIdentifier>:vivado.xilinx.com:synthesis</spirit:envIdentifier>
        <spirit:language>VHDL</spirit:language>
        <spirit:modelName>HPUCore</spirit:modelName>
        <spirit:fileSetRef>
          <spirit:localName>xilinx_anylanguagesynthesis_xilinx_com_ip_fifo_generator_13_2__ref_view_fileset</spirit:localName>
        </spirit:fileSetRef>
        <spirit:fileSetRef>
          <spirit:localName>xilinx_anylanguagesynthesis_view_fileset</spirit:localName>
        </spirit:fileSetRef>
        <spirit:parameters>
          <spirit:parameter>
            <spirit:name>viewChecksum</spirit:name>
            <spirit:value>c854761e</spirit:value>
          </spirit:parameter>
        </spirit:parameters>
      </spirit:view>
      <spirit:view>
        <spirit:name>xilinx_anylanguagebehavioralsimulation</spirit:name>
        <spirit:displayName>Simulation</spirit:displayName>
        <spirit:envIdentifier>:vivado.xilinx.com:simulation</spirit:envIdentifier>
        <spirit:language>VHDL</spirit:language>
        <spirit:modelName>HPUCore</spirit:modelName>
        <spirit:fileSetRef>
          <spirit:localName>xilinx_anylanguagebehavioralsimulation_xilinx_com_ip_fifo_generator_13_2__ref_view_fileset</spirit:localName>
        </spirit:fileSetRef>
        <spirit:fileSetRef>
          <spirit:localName>xilinx_anylanguagebehavioralsimulation_view_fileset</spirit:localName>
        </spirit:fileSetRef>
        <spirit:parameters>
          <spirit:parameter>
            <spirit:name>viewChecksum</spirit:name>
            <spirit:value>ad411913</spirit:value>
          </spirit:parameter>
        </spirit:parameters>
      </spirit:view>
      <spirit:view>
        <spirit:name>xilinx_testbench</spirit:name>
        <spirit:displayName>Test Bench</spirit:displayName>
        <spirit:envIdentifier>:vivado.xilinx.com:simulation.testbench</spirit:envIdentifier>
        <spirit:modelName>HPUcore_tb</spirit:modelName>
        <spirit:fileSetRef>
          <spirit:localName>xilinx_testbench_view_fileset</spirit:localName>
        </spirit:fileSetRef>
        <spirit:parameters>
          <spirit:parameter>
            <spirit:name>viewChecksum</spirit:name>
            <spirit:value>5c06198c</spirit:value>
          </spirit:parameter>
        </spirit:parameters>
      </spirit:view>
      <spirit:view>
        <spirit:name>xilinx_xpgui</spirit:name>
        <spirit:displayName>UI Layout</spirit:displayName>
        <spirit:envIdentifier>:vivado.xilinx.com:xgui.ui</spirit:envIdentifier>
        <spirit:fileSetRef>
          <spirit:localName>xilinx_xpgui_view_fileset</spirit:localName>
        </spirit:fileSetRef>
        <spirit:parameters>
          <spirit:parameter>
            <spirit:name>viewChecksum</spirit:name>
            <spirit:value>e78465f2</spirit:value>
          </spirit:parameter>
        </spirit:parameters>
      </spirit:view>
      <spirit:view>
        <spirit:name>xilinx_utilityxitfiles</spirit:name>
        <spirit:displayName>Utility XIT/TTCL</spirit:displayName>
        <spirit:envIdentifier>:vivado.xilinx.com:xit.util</spirit:envIdentifier>
        <spirit:fileSetRef>
          <spirit:localName>xilinx_utilityxitfiles_view_fileset</spirit:localName>
        </spirit:fileSetRef>
        <spirit:parameters>
          <spirit:parameter>
            <spirit:name>viewChecksum</spirit:name>
            <spirit:value>ab6f3878</spirit:value>
          </spirit:parameter>
        </spirit:parameters>
      </spirit:view>
      <spirit:view>
        <spirit:name>xilinx_productguide</spirit:name>
        <spirit:displayName>Product Guide</spirit:displayName>
        <spirit:envIdentifier>:vivado.xilinx.com:docs.productguide</spirit:envIdentifier>
        <spirit:fileSetRef>
          <spirit:localName>xilinx_productguide_view_fileset</spirit:localName>
        </spirit:fileSetRef>
        <spirit:parameters>
          <spirit:parameter>
            <spirit:name>viewChecksum</spirit:name>
            <spirit:value>73d1b646</spirit:value>
          </spirit:parameter>
        </spirit:parameters>
      </spirit:view>
      <spirit:view>
        <spirit:name>xilinx_versioninformation</spirit:name>
        <spirit:displayName>Version Information</spirit:displayName>
        <spirit:envIdentifier>:vivado.xilinx.com:docs.versioninfo</spirit:envIdentifier>
        <spirit:fileSetRef>
          <spirit:localName>xilinx_versioninformation_view_fileset</spirit:localName>
        </spirit:fileSetRef>
      </spirit:view>
      <spirit:view>
        <spirit:name>xilinx_miscfiles</spirit:name>
        <spirit:displayName>Miscellaneous</spirit:displayName>
        <spirit:envIdentifier>:vivado.xilinx.com:misc.files</spirit:envIdentifier>
        <spirit:fileSetRef>
          <spirit:localName>xilinx_miscfiles_view_fileset</spirit:localName>
        </spirit:fileSetRef>
        <spirit:parameters>
          <spirit:parameter>
            <spirit:name>viewChecksum</spirit:name>
            <spirit:value>47c8fd26</spirit:value>
          </spirit:parameter>
        </spirit:parameters>
      </spirit:view>
    </spirit:views>
    <spirit:ports>
      <spirit:port>
        <spirit:name>CLEAR_N_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>CLK_CORE_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>CLK_AXIS_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>CLK_HSSAER_LS_P_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.CLK_HSSAER_LS_P_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_HAS_HSSAER&apos;)) = true() or spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_HAS_HSSAER&apos;)) = true() or spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_A_HAS_HSSAER&apos;)) = true() or spirit:decode(id(&apos;MODELPARAM_VALUE.C_TX_HAS_HSSAER&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>CLK_HSSAER_LS_N_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x1</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.CLK_HSSAER_LS_N_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_HAS_HSSAER&apos;)) = true() or spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_HAS_HSSAER&apos;)) = true() or spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_A_HAS_HSSAER&apos;)) = true() or spirit:decode(id(&apos;MODELPARAM_VALUE.C_TX_HAS_HSSAER&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>CLK_HSSAER_HS_P_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.CLK_HSSAER_HS_P_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_HAS_HSSAER&apos;)) = true() or spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_HAS_HSSAER&apos;)) = true() or spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_A_HAS_HSSAER&apos;)) = true() or spirit:decode(id(&apos;MODELPARAM_VALUE.C_TX_HAS_HSSAER&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>CLK_HSSAER_HS_N_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x1</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.CLK_HSSAER_HS_N_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_HAS_HSSAER&apos;)) = true() or spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_HAS_HSSAER&apos;)) = true() or spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_A_HAS_HSSAER&apos;)) = true() or spirit:decode(id(&apos;MODELPARAM_VALUE.C_TX_HAS_HSSAER&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>Tx_PAER_Addr_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_PAER_DSIZE&apos;)) - 1)">23</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.Tx_PAER_Addr_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TX_HAS_PAER&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>Tx_PAER_Req_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.Tx_PAER_Req_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TX_HAS_PAER&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>Tx_PAER_Ack_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.Tx_PAER_Ack_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TX_HAS_PAER&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>Tx_HSSAER_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TX_HSSAER_N_CHAN&apos;)) - 1)">3</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.Tx_HSSAER_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TX_HAS_HSSAER&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>Tx_TxGtpMsg_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.Tx_TxGtpMsg_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TX_HAS_GTP&apos;)) = true">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>Tx_TxGtpMsgSrcRdy_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.Tx_TxGtpMsgSrcRdy_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TX_HAS_GTP&apos;)) = true">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>Tx_TxGtpMsgDstRdy_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.Tx_TxGtpMsgDstRdy_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TX_HAS_GTP&apos;)) = true">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>Tx_TxGtpAlignRequest_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.Tx_TxGtpAlignRequest_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TX_HAS_GTP&apos;)) = true">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>Tx_TxGtpAlignFlag_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.Tx_TxGtpAlignFlag_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TX_HAS_GTP&apos;)) = true">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>Tx_GTP_TxUsrClk2_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.Tx_GTP_TxUsrClk2_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TX_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>Tx_GTP_SoftResetTx_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.Tx_GTP_SoftResetTx_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TX_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>Tx_GTP_DataValid_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.Tx_GTP_DataValid_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TX_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>Tx_GTP_Txuserrdy_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.Tx_GTP_Txuserrdy_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TX_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>Tx_GTP_Txdata_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GTP_DSIZE&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.Tx_GTP_Txdata_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TX_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>Tx_GTP_Txcharisk_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GTP_DSIZE&apos;)) / 8) - 1)">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.Tx_GTP_Txcharisk_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TX_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>Tx_GTP_PllLock_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.Tx_GTP_PllLock_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TX_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>Tx_GTP_PllRefclklost_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.Tx_GTP_PllRefclklost_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TX_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>Tx_SPNN_Data_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">6</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.Tx_SPNN_Data_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TX_HAS_SPNNLNK&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>Tx_SPNN_Ack_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.Tx_SPNN_Ack_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TX_HAS_SPNNLNK&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>LRx_PAER_Addr_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_PAER_DSIZE&apos;)) - 1)">23</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.LRx_PAER_Addr_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_HAS_PAER&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>LRx_PAER_Req_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.LRx_PAER_Req_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_HAS_PAER&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>LRx_PAER_Ack_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.LRx_PAER_Ack_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_HAS_PAER&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>LRx_HSSAER_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_HSSAER_N_CHAN&apos;)) - 1)">3</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.LRx_HSSAER_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_HAS_HSSAER&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>LRx_RxGtpMsg_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.LRx_RxGtpMsg_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_HAS_GTP&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>LRx_RxGtpMsgSrcRdy_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.LRx_RxGtpMsgSrcRdy_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_HAS_GTP&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>LRx_RxGtpMsgDstRdy_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.LRx_RxGtpMsgDstRdy_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_HAS_GTP&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>LRx_RxGtpAlignRequest_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.LRx_RxGtpAlignRequest_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_HAS_GTP&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>LRx_GTP_RxUsrClk2_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.LRx_GTP_RxUsrClk2_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>LRx_GTP_SoftResetRx_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.LRx_GTP_SoftResetRx_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>LRx_GTP_DataValid_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.LRx_GTP_DataValid_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>LRx_GTP_Rxuserrdy_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.LRx_GTP_Rxuserrdy_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>LRx_GTP_Rxdata_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GTP_DSIZE&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.LRx_GTP_Rxdata_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>LRx_GTP_Rxchariscomma_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GTP_DSIZE&apos;)) / 8) - 1)">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.LRx_GTP_Rxchariscomma_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>LRx_GTP_Rxcharisk_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GTP_DSIZE&apos;)) / 8) - 1)">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.LRx_GTP_Rxcharisk_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>LRx_GTP_Rxdisperr_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GTP_DSIZE&apos;)) / 8) - 1)">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.LRx_GTP_Rxdisperr_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>LRx_GTP_Rxnotintable_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GTP_DSIZE&apos;)) / 8) - 1)">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.LRx_GTP_Rxnotintable_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>LRx_GTP_Rxbyteisaligned_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.LRx_GTP_Rxbyteisaligned_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>LRx_GTP_Rxbyterealign_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.LRx_GTP_Rxbyterealign_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>LRx_GTP_PllLock_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.LRx_GTP_PllLock_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>LRx_GTP_PllRefclklost_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.LRx_GTP_PllRefclklost_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>LRx_GTH_gtwiz_userclk_rx_usrclk2_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">0</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.LRx_GTH_gtwiz_userclk_rx_usrclk2_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynquplus&quot;">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>LRx_GTH_gtwiz_reset_all_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">0</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.LRx_GTH_gtwiz_reset_all_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynquplus&quot;">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>LRx_GTH_gtwiz_userdata_rx_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GTP_DSIZE&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.LRx_GTH_gtwiz_userdata_rx_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynquplus&quot;">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>LRx_GTH_Rxctrl2_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.LRx_GTH_Rxctrl2_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynquplus&quot;">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>LRx_GTH_Rxctrl0_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.LRx_GTH_Rxctrl0_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynquplus&quot;">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>LRx_GTH_Rxctrl1_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.LRx_GTH_Rxctrl1_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynquplus&quot;">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>LRx_GTH_Rxctrl3_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.LRx_GTH_Rxctrl3_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynquplus&quot;">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>LRx_GTH_Rxbyteisaligned_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">0</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.LRx_GTH_Rxbyteisaligned_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynquplus&quot;">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>LRx_GTH_Rxbyterealign_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">0</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.LRx_GTH_Rxbyterealign_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynquplus&quot;">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>LRx_GTH_Qpll_lock_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">0</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.LRx_GTH_Qpll_lock_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynquplus&quot;">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>LRx_GTH_Qpll_refclklost_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">0</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.LRx_GTH_Qpll_refclklost_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynquplus&quot;">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>LRx_SPNN_Data_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">6</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.LRx_SPNN_Data_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_HAS_SPNNLNK&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>LRx_SPNN_Ack_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.LRx_SPNN_Ack_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_HAS_SPNNLNK&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>RRx_PAER_Addr_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_PAER_DSIZE&apos;)) - 1)">23</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.RRx_PAER_Addr_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_HAS_PAER&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>RRx_PAER_Req_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.RRx_PAER_Req_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_HAS_PAER&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>RRx_PAER_Ack_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.RRx_PAER_Ack_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_HAS_PAER&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>RRx_HSSAER_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_HSSAER_N_CHAN&apos;)) - 1)">3</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.RRx_HSSAER_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_HAS_HSSAER&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>RRx_RxGtpMsg_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.RRx_RxGtpMsg_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_HAS_GTP&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>RRx_RxGtpMsgSrcRdy_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.RRx_RxGtpMsgSrcRdy_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_HAS_GTP&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>RRx_RxGtpMsgDstRdy_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.RRx_RxGtpMsgDstRdy_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_HAS_GTP&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>RRx_RxGtpAlignRequest_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.RRx_RxGtpAlignRequest_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_HAS_GTP&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>RRx_GTP_RxUsrClk2_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.RRx_GTP_RxUsrClk2_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>RRx_GTP_SoftResetRx_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.RRx_GTP_SoftResetRx_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>RRx_GTP_DataValid_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.RRx_GTP_DataValid_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>RRx_GTP_Rxuserrdy_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.RRx_GTP_Rxuserrdy_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>RRx_GTP_Rxdata_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GTP_DSIZE&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.RRx_GTP_Rxdata_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>RRx_GTP_Rxchariscomma_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GTP_DSIZE&apos;)) / 8) - 1)">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.RRx_GTP_Rxchariscomma_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>RRx_GTP_Rxcharisk_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GTP_DSIZE&apos;)) / 8) - 1)">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.RRx_GTP_Rxcharisk_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>RRx_GTP_Rxdisperr_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GTP_DSIZE&apos;)) / 8) - 1)">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.RRx_GTP_Rxdisperr_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>RRx_GTP_Rxnotintable_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GTP_DSIZE&apos;)) / 8) - 1)">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.RRx_GTP_Rxnotintable_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>RRx_GTP_Rxbyteisaligned_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.RRx_GTP_Rxbyteisaligned_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>RRx_GTP_Rxbyterealign_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.RRx_GTP_Rxbyterealign_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>RRx_GTP_PllLock_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.RRx_GTP_PllLock_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>RRx_GTP_PllRefclklost_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.RRx_GTP_PllRefclklost_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>RRx_GTH_gtwiz_userclk_rx_usrclk2_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">0</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.RRx_GTH_gtwiz_userclk_rx_usrclk2_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynquplus&quot;">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>RRx_GTH_gtwiz_reset_all_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">0</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.RRx_GTH_gtwiz_reset_all_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynquplus&quot;">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>RRx_GTH_gtwiz_userdata_rx_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GTP_DSIZE&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.RRx_GTH_gtwiz_userdata_rx_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynquplus&quot;">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>RRx_GTH_Rxctrl2_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.RRx_GTH_Rxctrl2_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynquplus&quot;">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>RRx_GTH_Rxctrl0_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.RRx_GTH_Rxctrl0_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynquplus&quot;">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>RRx_GTH_Rxctrl1_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.RRx_GTH_Rxctrl1_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynquplus&quot;">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>RRx_GTH_Rxctrl3_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.RRx_GTH_Rxctrl3_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynquplus&quot;">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>RRx_GTH_Rxbyteisaligned_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">0</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.RRx_GTH_Rxbyteisaligned_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynquplus&quot;">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>RRx_GTH_Rxbyterealign_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">0</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.RRx_GTH_Rxbyterealign_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynquplus&quot;">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>RRx_GTH_Qpll_lock_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">0</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.RRx_GTH_Qpll_lock_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynquplus&quot;">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>RRx_GTH_Qpll_refclklost_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">0</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.RRx_GTH_Qpll_refclklost_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynquplus&quot;">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>RRx_SPNN_Data_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">6</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.RRx_SPNN_Data_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_HAS_SPNNLNK&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>RRx_SPNN_Ack_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.RRx_SPNN_Ack_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_HAS_SPNNLNK&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ARx_PAER_Addr_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_PAER_DSIZE&apos;)) - 1)">23</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.ARx_PAER_Addr_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_A_HAS_PAER&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ARx_PAER_Req_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.ARx_PAER_Req_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_A_HAS_PAER&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ARx_PAER_Ack_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.ARx_PAER_Ack_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_A_HAS_PAER&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ARx_HSSAER_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_HSSAER_N_CHAN&apos;)) - 1)">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.ARx_HSSAER_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_A_HAS_HSSAER&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ARx_RxGtpMsg_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.ARx_RxGtpMsg_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_A_HAS_GTP&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ARx_RxGtpMsgSrcRdy_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.ARx_RxGtpMsgSrcRdy_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_A_HAS_GTP&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ARx_RxGtpMsgDstRdy_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.ARx_RxGtpMsgDstRdy_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_A_HAS_GTP&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ARx_RxGtpAlignRequest_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.ARx_RxGtpAlignRequest_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_A_HAS_GTP&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ARx_GTP_RxUsrClk2_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.ARx_GTP_RxUsrClk2_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_A_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ARx_GTP_SoftResetRx_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.ARx_GTP_SoftResetRx_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_A_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ARx_GTP_DataValid_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.ARx_GTP_DataValid_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_A_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ARx_GTP_Rxuserrdy_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.ARx_GTP_Rxuserrdy_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_A_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ARx_GTP_Rxdata_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GTP_DSIZE&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.ARx_GTP_Rxdata_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_A_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ARx_GTP_Rxchariscomma_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GTP_DSIZE&apos;)) / 8) - 1)">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.ARx_GTP_Rxchariscomma_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_A_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ARx_GTP_Rxcharisk_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GTP_DSIZE&apos;)) / 8) - 1)">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.ARx_GTP_Rxcharisk_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_A_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ARx_GTP_Rxdisperr_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GTP_DSIZE&apos;)) / 8) - 1)">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.ARx_GTP_Rxdisperr_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_A_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ARx_GTP_Rxnotintable_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GTP_DSIZE&apos;)) / 8) - 1)">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.ARx_GTP_Rxnotintable_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_A_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ARx_GTP_Rxbyteisaligned_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.ARx_GTP_Rxbyteisaligned_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_A_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ARx_GTP_Rxbyterealign_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.ARx_GTP_Rxbyterealign_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_A_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ARx_GTP_PllLock_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.ARx_GTP_PllLock_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_A_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ARx_GTP_PllRefclklost_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.ARx_GTP_PllRefclklost_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_A_HAS_GTP&apos;)) = true() and spirit:decode(id(&apos;MODELPARAM_VALUE.C_FPGA_FAM&apos;)) = &quot;zynq&quot;">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ARx_GTH_gtwiz_userclk_rx_usrclk2_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">0</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>ARx_GTH_gtwiz_reset_all_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">0</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>ARx_GTH_gtwiz_userdata_rx_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GTP_DSIZE&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>ARx_GTH_Rxctrl2_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>ARx_GTH_Rxctrl0_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>ARx_GTH_Rxctrl1_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>ARx_GTH_Rxctrl3_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>ARx_GTH_Rxbyteisaligned_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">0</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>ARx_GTH_Rxbyterealign_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">0</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>ARx_GTH_Qpll_lock_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">0</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>ARx_GTH_Qpll_refclklost_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">0</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>ARx_SPNN_Data_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">6</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.ARx_SPNN_Data_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_A_HAS_SPNNLNK&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ARx_SPNN_Ack_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.ARx_SPNN_Ack_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_A_HAS_SPNNLNK&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>RRxData_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.RRxData_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_INTERCEPTION&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>RRxSrcRdy_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.RRxSrcRdy_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_INTERCEPTION&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>RRxDstRdy_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.RRxDstRdy_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_INTERCEPTION&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>RRxBypassData_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.RRxBypassData_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_INTERCEPTION&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>RRxBypassSrcRdy_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.RRxBypassSrcRdy_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_INTERCEPTION&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>RRxBypassDstRdy_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.RRxBypassDstRdy_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_R_INTERCEPTION&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>LRxData_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.LRxData_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_INTERCEPTION&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>LRxSrcRdy_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.LRxSrcRdy_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_INTERCEPTION&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>LRxDstRdy_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.LRxDstRdy_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_INTERCEPTION&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>LRxBypassData_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.LRxBypassData_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_INTERCEPTION&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>LRxBypassSrcRdy_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.LRxBypassSrcRdy_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_INTERCEPTION&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>LRxBypassDstRdy_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.LRxBypassDstRdy_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_L_INTERCEPTION&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>AuxRxData_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.AuxRxData_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_A_INTERCEPTION&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>AuxRxSrcRdy_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.AuxRxSrcRdy_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_A_INTERCEPTION&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>AuxRxDstRdy_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.AuxRxDstRdy_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_A_INTERCEPTION&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>AuxRxBypassData_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.AuxRxBypassData_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_A_INTERCEPTION&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>AuxRxBypassSrcRdy_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.AuxRxBypassSrcRdy_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_A_INTERCEPTION&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>AuxRxBypassDstRdy_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.AuxRxBypassDstRdy_o" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_A_INTERCEPTION&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>DefLocFarLpbk_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.DefLocFarLpbk_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_DEFAULT_LOOPBACK&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>DefLocNearLpbk_i</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.DefLocNearLpbk_i" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_DEFAULT_LOOPBACK&apos;)) = true">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>Interrupt_o</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>S_AXI_ARESETN</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>S_AXI_AWADDR</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_S_AXI_ADDR_WIDTH&apos;)) - 1)">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>S_AXI_AWVALID</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>S_AXI_WDATA</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_S_AXI_DATA_WIDTH&apos;)) - 1)">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>S_AXI_WSTRB</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_S_AXI_DATA_WIDTH&apos;)) / 8) - 1)">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">1</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>S_AXI_WVALID</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>S_AXI_BREADY</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>S_AXI_ARADDR</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_S_AXI_ADDR_WIDTH&apos;)) - 1)">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>S_AXI_ARVALID</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>S_AXI_RREADY</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>S_AXI_ARREADY</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>S_AXI_RDATA</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_S_AXI_DATA_WIDTH&apos;)) - 1)">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>S_AXI_RRESP</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>S_AXI_RVALID</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>S_AXI_WREADY</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>S_AXI_BRESP</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>S_AXI_BVALID</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>S_AXI_AWREADY</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>S_AXIS_TREADY</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>S_AXIS_TDATA</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>S_AXIS_TLAST</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>S_AXIS_TVALID</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>M_AXIS_TVALID</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>M_AXIS_TDATA</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>M_AXIS_TLAST</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>M_AXIS_TREADY</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">1</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
      </spirit:port>
    </spirit:ports>
    <spirit:modelParameters>
      <spirit:modelParameter xsi:type="spirit:nameValueTypeType" spirit:dataType="integer">
        <spirit:name>C_PAER_DSIZE</spirit:name>
        <spirit:displayName>C Paer Dsize</spirit:displayName>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_PAER_DSIZE" spirit:minimum="1" spirit:maximum="29" spirit:rangeType="long">24</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_RX_HSSAER_N_CHAN</spirit:name>
        <spirit:displayName>C Rx Hssaer N Chan</spirit:displayName>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_RX_HSSAER_N_CHAN" spirit:minimum="1" spirit:maximum="4" spirit:rangeType="long">4</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>C_TX_HAS_PAER</spirit:name>
        <spirit:displayName>C Tx Has Paer</spirit:displayName>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_TX_HAS_PAER">true</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>C_TX_HAS_HSSAER</spirit:name>
        <spirit:displayName>C Tx Has Hssaer</spirit:displayName>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_TX_HAS_HSSAER">true</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_TX_HSSAER_N_CHAN</spirit:name>
        <spirit:displayName>C Tx Hssaer N Chan</spirit:displayName>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_TX_HSSAER_N_CHAN" spirit:minimum="1" spirit:maximum="4" spirit:rangeType="long">4</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>C_TX_HAS_GTP</spirit:name>
        <spirit:displayName>C Tx Has Gtp</spirit:displayName>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_TX_HAS_GTP">false</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:id="MODELPARAM_ENABLEMENT.C_TX_HAS_GTP">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>C_TX_HAS_SPNNLNK</spirit:name>
        <spirit:displayName>C Tx Has Spnnlnk</spirit:displayName>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_TX_HAS_SPNNLNK">true</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_PSPNNLNK_WIDTH</spirit:name>
        <spirit:displayName>C Pspnnlnk Width</spirit:displayName>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_PSPNNLNK_WIDTH" spirit:minimum="1" spirit:maximum="32" spirit:rangeType="long">32</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:id="MODELPARAM_ENABLEMENT.C_PSPNNLNK_WIDTH">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_S_AXI_DATA_WIDTH</spirit:name>
        <spirit:displayName>C S Axi Data Width</spirit:displayName>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_S_AXI_DATA_WIDTH">32</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_S_AXI_ADDR_WIDTH</spirit:name>
        <spirit:displayName>C S Axi Addr Width</spirit:displayName>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_S_AXI_ADDR_WIDTH">8</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_SLV_DWIDTH</spirit:name>
        <spirit:displayName>C Slv Dwidth</spirit:displayName>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_SLV_DWIDTH">32</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="std_logic_vector(2 downto 0)">
        <spirit:name>C_RX_PAER_L_SENS_ID</spirit:name>
        <spirit:displayName>C Rx Paer L Sens Id</spirit:displayName>
        <spirit:value spirit:format="bitString" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_RX_PAER_L_SENS_ID" spirit:bitStringLength="3">&quot;000&quot;</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="std_logic_vector(2 downto 0)">
        <spirit:name>C_RX_SAER0_L_SENS_ID</spirit:name>
        <spirit:displayName>C Rx Saer0 L Sens Id</spirit:displayName>
        <spirit:value spirit:format="bitString" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_RX_SAER0_L_SENS_ID" spirit:bitStringLength="3">&quot;000&quot;</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="std_logic_vector(2 downto 0)">
        <spirit:name>C_RX_SAER1_L_SENS_ID</spirit:name>
        <spirit:displayName>C Rx Saer1 L Sens Id</spirit:displayName>
        <spirit:value spirit:format="bitString" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_RX_SAER1_L_SENS_ID" spirit:bitStringLength="3">&quot;000&quot;</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="std_logic_vector(2 downto 0)">
        <spirit:name>C_RX_SAER2_L_SENS_ID</spirit:name>
        <spirit:displayName>C Rx Saer2 L Sens Id</spirit:displayName>
        <spirit:value spirit:format="bitString" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_RX_SAER2_L_SENS_ID" spirit:bitStringLength="3">&quot;000&quot;</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="std_logic_vector(2 downto 0)">
        <spirit:name>C_RX_SAER3_L_SENS_ID</spirit:name>
        <spirit:displayName>C Rx Saer3 L Sens Id</spirit:displayName>
        <spirit:value spirit:format="bitString" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_RX_SAER3_L_SENS_ID" spirit:bitStringLength="3">&quot;000&quot;</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="std_logic_vector(2 downto 0)">
        <spirit:name>C_RX_PAER_R_SENS_ID</spirit:name>
        <spirit:displayName>C Rx Paer R Sens Id</spirit:displayName>
        <spirit:value spirit:format="bitString" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_RX_PAER_R_SENS_ID" spirit:bitStringLength="3">&quot;000&quot;</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="std_logic_vector(2 downto 0)">
        <spirit:name>C_RX_SAER0_R_SENS_ID</spirit:name>
        <spirit:displayName>C Rx Saer0 R Sens Id</spirit:displayName>
        <spirit:value spirit:format="bitString" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_RX_SAER0_R_SENS_ID" spirit:bitStringLength="3">&quot;000&quot;</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="std_logic_vector(2 downto 0)">
        <spirit:name>C_RX_SAER1_R_SENS_ID</spirit:name>
        <spirit:displayName>C Rx Saer1 R Sens Id</spirit:displayName>
        <spirit:value spirit:format="bitString" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_RX_SAER1_R_SENS_ID" spirit:bitStringLength="3">&quot;000&quot;</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="std_logic_vector(2 downto 0)">
        <spirit:name>C_RX_SAER2_R_SENS_ID</spirit:name>
        <spirit:displayName>C Rx Saer2 R Sens Id</spirit:displayName>
        <spirit:value spirit:format="bitString" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_RX_SAER2_R_SENS_ID" spirit:bitStringLength="3">&quot;000&quot;</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="std_logic_vector(2 downto 0)">
        <spirit:name>C_RX_SAER3_R_SENS_ID</spirit:name>
        <spirit:displayName>C Rx Saer3 R Sens Id</spirit:displayName>
        <spirit:value spirit:format="bitString" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_RX_SAER3_R_SENS_ID" spirit:bitStringLength="3">&quot;000&quot;</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="std_logic_vector(2 downto 0)">
        <spirit:name>C_RX_PAER_A_SENS_ID</spirit:name>
        <spirit:displayName>C Rx Paer A Sens Id</spirit:displayName>
        <spirit:value spirit:format="bitString" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_RX_PAER_A_SENS_ID" spirit:bitStringLength="3">&quot;001&quot;</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="std_logic_vector(2 downto 0)">
        <spirit:name>C_RX_SAER0_A_SENS_ID</spirit:name>
        <spirit:displayName>C Rx Saer0 A Sens Id</spirit:displayName>
        <spirit:value spirit:format="bitString" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_RX_SAER0_A_SENS_ID" spirit:bitStringLength="3">&quot;001&quot;</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="std_logic_vector(2 downto 0)">
        <spirit:name>C_RX_SAER1_A_SENS_ID</spirit:name>
        <spirit:displayName>C Rx Saer1 A Sens Id</spirit:displayName>
        <spirit:value spirit:format="bitString" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_RX_SAER1_A_SENS_ID" spirit:bitStringLength="3">&quot;001&quot;</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="std_logic_vector(2 downto 0)">
        <spirit:name>C_RX_SAER2_A_SENS_ID</spirit:name>
        <spirit:displayName>C Rx Saer2 A Sens Id</spirit:displayName>
        <spirit:value spirit:format="bitString" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_RX_SAER2_A_SENS_ID" spirit:bitStringLength="3">&quot;001&quot;</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="std_logic_vector(2 downto 0)">
        <spirit:name>C_RX_SAER3_A_SENS_ID</spirit:name>
        <spirit:displayName>C Rx Saer3 A Sens Id</spirit:displayName>
        <spirit:value spirit:format="bitString" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_RX_SAER3_A_SENS_ID" spirit:bitStringLength="3">&quot;001&quot;</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>C_HAS_DEFAULT_LOOPBACK</spirit:name>
        <spirit:displayName>C Has Default Loopback</spirit:displayName>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_HAS_DEFAULT_LOOPBACK">true</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_GTP_DSIZE</spirit:name>
        <spirit:displayName>C Gtp Dsize</spirit:displayName>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_GTP_DSIZE" spirit:minimum="0" spirit:rangeType="long">16</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>C_SIM_TIME_COMPRESSION</spirit:name>
        <spirit:displayName>C Sim Time Compression</spirit:displayName>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_SIM_TIME_COMPRESSION">false</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>C_RX_L_HAS_PAER</spirit:name>
        <spirit:displayName>C Rx L Has Paer</spirit:displayName>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_RX_L_HAS_PAER">true</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>C_RX_R_HAS_PAER</spirit:name>
        <spirit:displayName>C Rx R Has Paer</spirit:displayName>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_RX_R_HAS_PAER">true</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>C_RX_A_HAS_PAER</spirit:name>
        <spirit:displayName>C Rx A Has Paer</spirit:displayName>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_RX_A_HAS_PAER">true</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>C_RX_L_HAS_HSSAER</spirit:name>
        <spirit:displayName>C Rx L Has Hssaer</spirit:displayName>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_RX_L_HAS_HSSAER">true</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>C_RX_R_HAS_HSSAER</spirit:name>
        <spirit:displayName>C Rx R Has Hssaer</spirit:displayName>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_RX_R_HAS_HSSAER">true</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>C_RX_A_HAS_HSSAER</spirit:name>
        <spirit:displayName>C Rx A Has Hssaer</spirit:displayName>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_RX_A_HAS_HSSAER">true</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>C_RX_L_HAS_GTP</spirit:name>
        <spirit:displayName>C Rx L Has Gtp</spirit:displayName>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_RX_L_HAS_GTP">true</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>C_RX_R_HAS_GTP</spirit:name>
        <spirit:displayName>C Rx R Has Gtp</spirit:displayName>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_RX_R_HAS_GTP">true</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>C_RX_A_HAS_GTP</spirit:name>
        <spirit:displayName>C Rx A Has Gtp</spirit:displayName>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_RX_A_HAS_GTP">true</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>C_RX_L_HAS_SPNNLNK</spirit:name>
        <spirit:displayName>C Rx L Has Spnnlnk</spirit:displayName>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_RX_L_HAS_SPNNLNK">true</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>C_RX_R_HAS_SPNNLNK</spirit:name>
        <spirit:displayName>C Rx R Has Spnnlnk</spirit:displayName>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_RX_R_HAS_SPNNLNK">true</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>C_RX_A_HAS_SPNNLNK</spirit:name>
        <spirit:displayName>C Rx A Has Spnnlnk</spirit:displayName>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_RX_A_HAS_SPNNLNK">true</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>C_RX_L_INTERCEPTION</spirit:name>
        <spirit:displayName>C Rx L Interception</spirit:displayName>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_RX_L_INTERCEPTION">true</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>C_RX_R_INTERCEPTION</spirit:name>
        <spirit:displayName>C Rx R Interception</spirit:displayName>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_RX_R_INTERCEPTION">true</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>C_RX_A_INTERCEPTION</spirit:name>
        <spirit:displayName>C Rx A Interception</spirit:displayName>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_RX_A_INTERCEPTION">true</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_GTP_RXUSRCLK2_PERIOD_PS</spirit:name>
        <spirit:displayName>C Gtp Rxusrclk2 Period Ps</spirit:displayName>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_GTP_RXUSRCLK2_PERIOD_PS" spirit:minimum="0" spirit:rangeType="long">6400</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_GTP_TXUSRCLK2_PERIOD_PS</spirit:name>
        <spirit:displayName>C Gtp Txusrclk2 Period Ps</spirit:displayName>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_GTP_TXUSRCLK2_PERIOD_PS" spirit:minimum="0" spirit:rangeType="long">6400</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:id="MODELPARAM_ENABLEMENT.C_GTP_TXUSRCLK2_PERIOD_PS">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_SYSCLK_PERIOD_PS</spirit:name>
        <spirit:displayName>C Sysclk Period Ps</spirit:displayName>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_SYSCLK_PERIOD_PS" spirit:minimum="0" spirit:rangeType="long">10000</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="string">
        <spirit:name>C_FPGA_FAM</spirit:name>
        <spirit:displayName>C Fpga Fam</spirit:displayName>
        <spirit:value spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_FPGA_FAM">zynquplus</spirit:value>
      </spirit:modelParameter>
    </spirit:modelParameters>
  </spirit:model>
  <spirit:choices>
    <spirit:choice>
      <spirit:name>choice_list_07c83d4f</spirit:name>
      <spirit:enumeration>16</spirit:enumeration>
      <spirit:enumeration>32</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choice_list_28fbf084</spirit:name>
      <spirit:enumeration>zynq</spirit:enumeration>
      <spirit:enumeration>zynquplus</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choice_list_99a1d2b9</spirit:name>
      <spirit:enumeration>LEVEL_HIGH</spirit:enumeration>
      <spirit:enumeration>LEVEL_LOW</spirit:enumeration>
      <spirit:enumeration>EDGE_RISING</spirit:enumeration>
      <spirit:enumeration>EDGE_FALLING</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choice_list_9d8b0d81</spirit:name>
      <spirit:enumeration>ACTIVE_HIGH</spirit:enumeration>
      <spirit:enumeration>ACTIVE_LOW</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choice_pairs_4c98ecdc</spirit:name>
      <spirit:enumeration spirit:text="Eye">&quot;000&quot;</spirit:enumeration>
      <spirit:enumeration spirit:text="Skin">&quot;001&quot;</spirit:enumeration>
      <spirit:enumeration spirit:text="Ear">&quot;100&quot;</spirit:enumeration>
      <spirit:enumeration spirit:text="IMU">&quot;010&quot;</spirit:enumeration>
      <spirit:enumeration spirit:text="Generic">&quot;111&quot;</spirit:enumeration>
    </spirit:choice>
  </spirit:choices>
  <spirit:fileSets>
    <spirit:fileSet>
      <spirit:name>xilinx_anylanguagesynthesis_view_fileset</spirit:name>
      <spirit:file>
        <spirit:name>src/hdl/ddr_sampler.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/fifo_lfsr.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/hssaer_paer_rx_wrapper.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/hssaer_paer_trx.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/hssaer_paer_tx_wrapper.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/hssaer_rx.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/hssaer_tx.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/spinn_neu_if_lib/in_mapper.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>spinn_neu_if_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/nrzi_ddr_tx.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/spinn_neu_if_lib/out_mapper.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>spinn_neu_if_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/spinn_neu_if_lib/spinn_driver.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>spinn_neu_if_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/spinn_neu_if_lib/spinn_neu_if.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>spinn_neu_if_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/spinn_neu_if_lib/spinn_receiver.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>spinn_neu_if_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/spinn_neu_if_lib/synchronizer.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>spinn_neu_if_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/tmiv_cnt2.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/tmiv_dec.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/twophase.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/utils.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/HPU_lib/AsyncStabilizer.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>HPU_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/neuelab_lib/neuelab_pkg.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>neuelab_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/HPU_lib/Vision_pkg.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>HPU_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/HPU_lib/HPU_pkg.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>HPU_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/neuserial_lib/neuserial_pkg.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>neuserial_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/HPU_lib/RegisterArray1.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>HPU_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/HPU_lib/ShiftRegFifo.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>HPU_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/HPU_lib/ShiftRegFifoRRInp.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>HPU_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/datapath_lib/datapath_pkg.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>datapath_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/HPU_lib/ShiftRegFifoRROut.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>datapath_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/HPU_lib/SimplePAERInputRRv2.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>HPU_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/HPU_lib/SimplePAEROutputRR.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>HPU_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/HPU_lib/TimestampWrapDetector.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>HPU_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/common_lib/common.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>common_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/spinn_neu_if_lib/spinn_neu_pkg.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>spinn_neu_if_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/datapath_lib/hpu_rx_datapath.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>datapath_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/datapath_lib/hpu_tx_datapath.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>datapath_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/HPU_lib/merge_rdy.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>HPU_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/datapath_lib/neuserial_PAER_arbiter.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>datapath_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/HPU_lib/neuserial_PAER_splitter.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>HPU_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/neuserial_lib/neuserial_core.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>neuserial_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/HPU_lib/req_fifo.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>HPU_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/HPU_lib/timestamp.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>HPU_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/HPU_lib/HPUCore.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>CHECKSUM_e449003f</spirit:userFileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>HPU_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/constrs/HPU_Core_timing.xdc</spirit:name>
        <spirit:userFileType>xdc</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/Vivado_ip/RXFIFO_HPU_ZYNQ/RXFIFO_HPU_ZYNQ.xci</spirit:name>
        <spirit:userFileType>xci</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/Vivado_ip/TXFIFO_HPU_ZYNQ/TXFIFO_HPU_ZYNQ.xci</spirit:name>
        <spirit:userFileType>xci</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/Vivado_ip/RXFIFO_HPU_ZYNQUPLUS/RXFIFO_HPU_ZYNQUPLUS.xci</spirit:name>
        <spirit:userFileType>xci</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/Vivado_ip/TXFIFO_HPU_ZYNQUPLUS/TXFIFO_HPU_ZYNQUPLUS.xci</spirit:name>
        <spirit:userFileType>xci</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/Vivado_ip/FIFO_SAER_ZYNQ/FIFO_SAER_ZYNQ.xci</spirit:name>
        <spirit:userFileType>xci</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/GT_lib/Vivado_ip/FIFO_GT_MSG_ZYNQ/FIFO_GT_MSG_ZYNQ.xci</spirit:name>
        <spirit:userFileType>xci</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/GT_lib/Vivado_ip/FIFO_GT_DATA_ZYNQ/FIFO_GT_DATA_ZYNQ.xci</spirit:name>
        <spirit:userFileType>xci</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/GT_lib/Vivado_ip/FIFO_GT_MSG_ZYNQUPLUS/FIFO_GT_MSG_ZYNQUPLUS.xci</spirit:name>
        <spirit:userFileType>xci</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/GT_lib/Vivado_ip/FIFO_GT_DATA_ZYNQUPLUS/FIFO_GT_DATA_ZYNQUPLUS.xci</spirit:name>
        <spirit:userFileType>xci</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/Vivado_ip/FIFO_SAER_ZYNQUPLUS/FIFO_SAER_ZYNQUPLUS.xci</spirit:name>
        <spirit:userFileType>xci</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/swissknife_lib/swissknife_pkg.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>swissknife_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/neuelab_lib/CoreMonSeq.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>neuelab_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/GT_lib/GT_Manager.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>GT_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/GT_lib/GT_enable_signal_cdc.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>GT_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/GT_lib/GT_pkg.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>GT_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/GT_lib/GT_time_machine.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>GT_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/neuserial_lib/axilite.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>neuserial_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/neuserial_lib/axistream.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>neuserial_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/neuserial_lib/loopback.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>neuserial_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/HPU_lib/reset_machine.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>HPU_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/HPU_lib/sequencer.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>HPU_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/swissknife_lib/signal_cdc.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>swissknife_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/HPU_lib/time_machine.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>HPU_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/HPU_lib/timetagger.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>CHECKSUM_6436b64e</spirit:userFileType>
        <spirit:logicalName>HPU_lib</spirit:logicalName>
      </spirit:file>
    </spirit:fileSet>
    <spirit:fileSet>
      <spirit:name>xilinx_anylanguagesynthesis_xilinx_com_ip_fifo_generator_13_2__ref_view_fileset</spirit:name>
      <spirit:vendorExtensions>
        <xilinx:subCoreRef>
          <xilinx:componentRef xilinx:vendor="xilinx.com" xilinx:library="ip" xilinx:name="fifo_generator" xilinx:version="13.2">
            <xilinx:mode xilinx:name="create_mode"/>
          </xilinx:componentRef>
        </xilinx:subCoreRef>
      </spirit:vendorExtensions>
    </spirit:fileSet>
    <spirit:fileSet>
      <spirit:name>xilinx_anylanguagebehavioralsimulation_view_fileset</spirit:name>
      <spirit:file>
        <spirit:name>src/hdl/ddr_sampler.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/fifo_lfsr.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/hssaer_paer_rx_wrapper.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/hssaer_paer_trx.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/hssaer_paer_tx_wrapper.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/hssaer_rx.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/hssaer_tx.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/spinn_neu_if_lib/in_mapper.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>spinn_neu_if_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/nrzi_ddr_tx.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/spinn_neu_if_lib/out_mapper.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>spinn_neu_if_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/spinn_neu_if_lib/spinn_driver.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>spinn_neu_if_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/spinn_neu_if_lib/spinn_neu_if.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>spinn_neu_if_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/spinn_neu_if_lib/spinn_receiver.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>spinn_neu_if_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/spinn_neu_if_lib/synchronizer.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>spinn_neu_if_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/tmiv_cnt2.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/tmiv_dec.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/twophase.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/utils.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/HPU_lib/AsyncStabilizer.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>HPU_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/neuelab_lib/neuelab_pkg.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>neuelab_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/HPU_lib/Vision_pkg.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>HPU_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/HPU_lib/HPU_pkg.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>HPU_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/neuserial_lib/neuserial_pkg.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>neuserial_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/HPU_lib/RegisterArray1.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>HPU_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/HPU_lib/ShiftRegFifo.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>HPU_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/HPU_lib/ShiftRegFifoRRInp.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>HPU_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/datapath_lib/datapath_pkg.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>datapath_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/HPU_lib/ShiftRegFifoRROut.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>datapath_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/HPU_lib/SimplePAERInputRRv2.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>HPU_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/HPU_lib/SimplePAEROutputRR.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>HPU_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/HPU_lib/TimestampWrapDetector.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>HPU_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/common_lib/common.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>common_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/spinn_neu_if_lib/spinn_neu_pkg.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>spinn_neu_if_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/datapath_lib/hpu_rx_datapath.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>datapath_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/datapath_lib/hpu_tx_datapath.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>datapath_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/HPU_lib/merge_rdy.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>HPU_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/datapath_lib/neuserial_PAER_arbiter.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>datapath_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/HPU_lib/neuserial_PAER_splitter.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>HPU_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/neuserial_lib/neuserial_core.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>neuserial_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/HPU_lib/req_fifo.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>HPU_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/HPU_lib/timestamp.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>HPU_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/HPU_lib/HPUCore.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:logicalName>HPU_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/Vivado_ip/RXFIFO_HPU_ZYNQ/RXFIFO_HPU_ZYNQ.xci</spirit:name>
        <spirit:userFileType>xci</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/Vivado_ip/TXFIFO_HPU_ZYNQ/TXFIFO_HPU_ZYNQ.xci</spirit:name>
        <spirit:userFileType>xci</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/Vivado_ip/RXFIFO_HPU_ZYNQUPLUS/RXFIFO_HPU_ZYNQUPLUS.xci</spirit:name>
        <spirit:userFileType>xci</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/Vivado_ip/TXFIFO_HPU_ZYNQUPLUS/TXFIFO_HPU_ZYNQUPLUS.xci</spirit:name>
        <spirit:userFileType>xci</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/Vivado_ip/FIFO_SAER_ZYNQ/FIFO_SAER_ZYNQ.xci</spirit:name>
        <spirit:userFileType>xci</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/GT_lib/Vivado_ip/FIFO_GT_MSG_ZYNQ/FIFO_GT_MSG_ZYNQ.xci</spirit:name>
        <spirit:userFileType>xci</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/GT_lib/Vivado_ip/FIFO_GT_DATA_ZYNQ/FIFO_GT_DATA_ZYNQ.xci</spirit:name>
        <spirit:userFileType>xci</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/GT_lib/Vivado_ip/FIFO_GT_MSG_ZYNQUPLUS/FIFO_GT_MSG_ZYNQUPLUS.xci</spirit:name>
        <spirit:userFileType>xci</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/GT_lib/Vivado_ip/FIFO_GT_DATA_ZYNQUPLUS/FIFO_GT_DATA_ZYNQUPLUS.xci</spirit:name>
        <spirit:userFileType>xci</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/Vivado_ip/FIFO_SAER_ZYNQUPLUS/FIFO_SAER_ZYNQUPLUS.xci</spirit:name>
        <spirit:userFileType>xci</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/swissknife_lib/swissknife_pkg.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>swissknife_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/neuelab_lib/CoreMonSeq.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>neuelab_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/GT_lib/GT_Manager.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>GT_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/GT_lib/GT_enable_signal_cdc.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>GT_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/GT_lib/GT_pkg.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>GT_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/GT_lib/GT_time_machine.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>GT_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/neuserial_lib/axilite.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>neuserial_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/neuserial_lib/axistream.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>neuserial_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/neuserial_lib/loopback.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>neuserial_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/HPU_lib/reset_machine.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>HPU_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/HPU_lib/sequencer.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>HPU_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/swissknife_lib/signal_cdc.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>swissknife_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/HPU_lib/time_machine.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>HPU_lib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/hdl/HPU_lib/timetagger.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>HPU_lib</spirit:logicalName>
      </spirit:file>
    </spirit:fileSet>
    <spirit:fileSet>
      <spirit:name>xilinx_anylanguagebehavioralsimulation_xilinx_com_ip_fifo_generator_13_2__ref_view_fileset</spirit:name>
      <spirit:vendorExtensions>
        <xilinx:subCoreRef>
          <xilinx:componentRef xilinx:vendor="xilinx.com" xilinx:library="ip" xilinx:name="fifo_generator" xilinx:version="13.2">
            <xilinx:mode xilinx:name="create_mode"/>
          </xilinx:componentRef>
        </xilinx:subCoreRef>
      </spirit:vendorExtensions>
    </spirit:fileSet>
    <spirit:fileSet>
      <spirit:name>xilinx_testbench_view_fileset</spirit:name>
      <spirit:file>
        <spirit:name>sim/AER_Device_Emulator.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:userFileType>USED_IN_implementation</spirit:userFileType>
        <spirit:userFileType>USED_IN_simulation</spirit:userFileType>
        <spirit:userFileType>USED_IN_synthesis</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>sim/SpiNNaker_emulator.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:userFileType>USED_IN_implementation</spirit:userFileType>
        <spirit:userFileType>USED_IN_simulation</spirit:userFileType>
        <spirit:userFileType>USED_IN_synthesis</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>sim/AXI4LiteMasterBFM_pkg.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:userFileType>USED_IN_simulation</spirit:userFileType>
        <spirit:userFileType>USED_IN_synthesis</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>sim/axi4lite_bfm_v00.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:userFileType>USED_IN_simulation</spirit:userFileType>
        <spirit:userFileType>USED_IN_synthesis</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>sim/HPUcore_tb.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:userFileType>USED_IN_simulation</spirit:userFileType>
        <spirit:userFileType>USED_IN_synthesis</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>sim/HPUcore_tb_behav.wcfg</spirit:name>
        <spirit:fileType>unknown</spirit:fileType>
        <spirit:userFileType>IMPORTED_FILE</spirit:userFileType>
        <spirit:userFileType>USED_IN_simulation</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>sim/GTP_Emulator.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>USED_IN_simulation</spirit:userFileType>
        <spirit:userFileType>USED_IN_synthesis</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>sim/fifo_tb_behav.wcfg</spirit:name>
        <spirit:fileType>unknown</spirit:fileType>
        <spirit:userFileType>USED_IN_simulation</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>sim/fifo_axis_tb_behav.wcfg</spirit:name>
        <spirit:fileType>unknown</spirit:fileType>
        <spirit:userFileType>USED_IN_simulation</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>sim/reset_machine_tb_behav.wcfg</spirit:name>
        <spirit:fileType>unknown</spirit:fileType>
        <spirit:userFileType>USED_IN_simulation</spirit:userFileType>
        <spirit:logicalName>work</spirit:logicalName>
      </spirit:file>
    </spirit:fileSet>
    <spirit:fileSet>
      <spirit:name>xilinx_xpgui_view_fileset</spirit:name>
      <spirit:file>
        <spirit:name>xgui/HPU_Core_v4_0.tcl</spirit:name>
        <spirit:fileType>tclSource</spirit:fileType>
        <spirit:userFileType>CHECKSUM_e78465f2</spirit:userFileType>
        <spirit:userFileType>XGUI_VERSION_2</spirit:userFileType>
      </spirit:file>
    </spirit:fileSet>
    <spirit:fileSet>
      <spirit:name>xilinx_utilityxitfiles_view_fileset</spirit:name>
      <spirit:file>
        <spirit:name>gui/HPUCore_v3_0.gtcl</spirit:name>
        <spirit:userFileType>GTCL</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>misc/iit-logo-icub.png</spirit:name>
        <spirit:userFileType>image</spirit:userFileType>
        <spirit:userFileType>LOGO</spirit:userFileType>
      </spirit:file>
    </spirit:fileSet>
    <spirit:fileSet>
      <spirit:name>xilinx_productguide_view_fileset</spirit:name>
      <spirit:file>
        <spirit:name>doc/HPU Core 4.0 - User Guide - RevC.pdf</spirit:name>
        <spirit:userFileType>pdf</spirit:userFileType>
      </spirit:file>
    </spirit:fileSet>
    <spirit:fileSet>
      <spirit:name>xilinx_versioninformation_view_fileset</spirit:name>
      <spirit:file>
        <spirit:name>doc/changelog.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
    </spirit:fileSet>
    <spirit:fileSet>
      <spirit:name>xilinx_miscfiles_view_fileset</spirit:name>
      <spirit:file>
        <spirit:name>src/Vivado_if/gtp_manager.xml</spirit:name>
        <spirit:userFileType>xml</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/Vivado_if/paer.xml</spirit:name>
        <spirit:userFileType>xml</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/Vivado_if/hssaer.xml</spirit:name>
        <spirit:userFileType>xml</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/Vivado_if/gth_manager_rx.xml</spirit:name>
        <spirit:userFileType>xml</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/Vivado_if/gth_manager_rx_rtl.xml</spirit:name>
        <spirit:userFileType>xml</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/Vivado_if/handshake.xml</spirit:name>
        <spirit:userFileType>xml</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/Vivado_if/SpiNNlink.xml</spirit:name>
        <spirit:userFileType>xml</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/Vivado_if/SpiNNlink_rtl.xml</spirit:name>
        <spirit:userFileType>xml</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/Vivado_if/hssaer_rtl.xml</spirit:name>
        <spirit:userFileType>xml</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/Vivado_if/paer_rtl.xml</spirit:name>
        <spirit:userFileType>xml</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/Vivado_if/gtp_manager_rtl.xml</spirit:name>
        <spirit:userFileType>xml</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>src/Vivado_if/handshake_rtl.xml</spirit:name>
        <spirit:userFileType>xml</spirit:userFileType>
      </spirit:file>
    </spirit:fileSet>
  </spirit:fileSets>
  <spirit:description>Head Processing Unit for iCub applications</spirit:description>
  <spirit:parameters>
    <spirit:parameter>
      <spirit:name>C_PAER_DSIZE</spirit:name>
      <spirit:displayName>Word Width</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_PAER_DSIZE" spirit:minimum="1" spirit:maximum="32" spirit:rangeType="long">24</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="generated" xilinx:id="PARAM_ENABLEMENT.C_PAER_DSIZE">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_RX_HSSAER_N_CHAN</spirit:name>
      <spirit:displayName>HSSAER RX Channels</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_RX_HSSAER_N_CHAN" spirit:minimum="1" spirit:maximum="4" spirit:rangeType="long">4</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="generated" xilinx:id="PARAM_ENABLEMENT.C_RX_HSSAER_N_CHAN">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_TX_HAS_PAER</spirit:name>
      <spirit:displayName>PAER TX</spirit:displayName>
      <spirit:value spirit:format="bool" spirit:resolve="user" spirit:id="PARAM_VALUE.C_TX_HAS_PAER">true</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_TX_HAS_HSSAER</spirit:name>
      <spirit:displayName>HSSAER TX Interface</spirit:displayName>
      <spirit:value spirit:format="bool" spirit:resolve="user" spirit:id="PARAM_VALUE.C_TX_HAS_HSSAER">true</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_TX_HSSAER_N_CHAN</spirit:name>
      <spirit:displayName>HSSAER TX Channels</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_TX_HSSAER_N_CHAN" spirit:minimum="1" spirit:maximum="4" spirit:rangeType="long">4</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="generated" xilinx:id="PARAM_ENABLEMENT.C_TX_HSSAER_N_CHAN">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_TX_HAS_GTP</spirit:name>
      <spirit:displayName>TX</spirit:displayName>
      <spirit:value spirit:format="bool" spirit:resolve="user" spirit:id="PARAM_VALUE.C_TX_HAS_GTP">false</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="generated" xilinx:id="PARAM_ENABLEMENT.C_TX_HAS_GTP">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_TX_HAS_SPNNLNK</spirit:name>
      <spirit:displayName>SpiNNlink TX</spirit:displayName>
      <spirit:value spirit:format="bool" spirit:resolve="user" spirit:id="PARAM_VALUE.C_TX_HAS_SPNNLNK">true</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_PSPNNLNK_WIDTH</spirit:name>
      <spirit:displayName>SpiNNaker Parallel Data Width</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_PSPNNLNK_WIDTH" spirit:minimum="1" spirit:maximum="32" spirit:rangeType="long">32</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="generated" xilinx:id="PARAM_ENABLEMENT.C_PSPNNLNK_WIDTH">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_S_AXI_DATA_WIDTH</spirit:name>
      <spirit:displayName>AXI4 Lite Slave Data width</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_S_AXI_DATA_WIDTH">32</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:id="PARAM_ENABLEMENT.C_S_AXI_DATA_WIDTH">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_S_AXI_ADDR_WIDTH</spirit:name>
      <spirit:displayName>AXI4 Lite Slave Address width</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_S_AXI_ADDR_WIDTH">8</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:id="PARAM_ENABLEMENT.C_S_AXI_ADDR_WIDTH">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_SLV_DWIDTH</spirit:name>
      <spirit:displayName>CTRL and CTRG Debug port width</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_SLV_DWIDTH">32</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:id="PARAM_ENABLEMENT.C_SLV_DWIDTH">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>Component_Name</spirit:name>
      <spirit:value spirit:resolve="user" spirit:id="PARAM_VALUE.Component_Name" spirit:order="1">HPU_Core_v4_0</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_RX_PAER_L_SENS_ID</spirit:name>
      <spirit:displayName>Left port sensor type</spirit:displayName>
      <spirit:value spirit:format="bitString" spirit:resolve="user" spirit:id="PARAM_VALUE.C_RX_PAER_L_SENS_ID" spirit:choiceRef="choice_pairs_4c98ecdc" spirit:bitStringLength="3">&quot;000&quot;</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="generated" xilinx:id="PARAM_ENABLEMENT.C_RX_PAER_L_SENS_ID">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_RX_SAER0_L_SENS_ID</spirit:name>
      <spirit:displayName>Ch0</spirit:displayName>
      <spirit:value spirit:format="bitString" spirit:resolve="user" spirit:id="PARAM_VALUE.C_RX_SAER0_L_SENS_ID" spirit:choiceRef="choice_pairs_4c98ecdc" spirit:bitStringLength="3">&quot;000&quot;</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="generated" xilinx:id="PARAM_ENABLEMENT.C_RX_SAER0_L_SENS_ID">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_RX_SAER1_L_SENS_ID</spirit:name>
      <spirit:displayName>Ch1</spirit:displayName>
      <spirit:value spirit:format="bitString" spirit:resolve="user" spirit:id="PARAM_VALUE.C_RX_SAER1_L_SENS_ID" spirit:choiceRef="choice_pairs_4c98ecdc" spirit:bitStringLength="3">&quot;000&quot;</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="generated" xilinx:id="PARAM_ENABLEMENT.C_RX_SAER1_L_SENS_ID">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_RX_SAER2_L_SENS_ID</spirit:name>
      <spirit:displayName>Ch2</spirit:displayName>
      <spirit:value spirit:format="bitString" spirit:resolve="user" spirit:id="PARAM_VALUE.C_RX_SAER2_L_SENS_ID" spirit:choiceRef="choice_pairs_4c98ecdc" spirit:bitStringLength="3">&quot;000&quot;</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="generated" xilinx:id="PARAM_ENABLEMENT.C_RX_SAER2_L_SENS_ID">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_RX_SAER3_L_SENS_ID</spirit:name>
      <spirit:displayName>Ch3</spirit:displayName>
      <spirit:value spirit:format="bitString" spirit:resolve="user" spirit:id="PARAM_VALUE.C_RX_SAER3_L_SENS_ID" spirit:choiceRef="choice_pairs_4c98ecdc" spirit:bitStringLength="3">&quot;000&quot;</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="generated" xilinx:id="PARAM_ENABLEMENT.C_RX_SAER3_L_SENS_ID">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_RX_PAER_R_SENS_ID</spirit:name>
      <spirit:displayName>Right port sensor type</spirit:displayName>
      <spirit:value spirit:format="bitString" spirit:resolve="user" spirit:id="PARAM_VALUE.C_RX_PAER_R_SENS_ID" spirit:choiceRef="choice_pairs_4c98ecdc" spirit:bitStringLength="3">&quot;000&quot;</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="generated" xilinx:id="PARAM_ENABLEMENT.C_RX_PAER_R_SENS_ID">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_RX_SAER0_R_SENS_ID</spirit:name>
      <spirit:displayName>Ch0</spirit:displayName>
      <spirit:value spirit:format="bitString" spirit:resolve="user" spirit:id="PARAM_VALUE.C_RX_SAER0_R_SENS_ID" spirit:choiceRef="choice_pairs_4c98ecdc" spirit:bitStringLength="3">&quot;000&quot;</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="generated" xilinx:id="PARAM_ENABLEMENT.C_RX_SAER0_R_SENS_ID">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_RX_SAER1_R_SENS_ID</spirit:name>
      <spirit:displayName>Ch1</spirit:displayName>
      <spirit:value spirit:format="bitString" spirit:resolve="user" spirit:id="PARAM_VALUE.C_RX_SAER1_R_SENS_ID" spirit:choiceRef="choice_pairs_4c98ecdc" spirit:bitStringLength="3">&quot;000&quot;</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="generated" xilinx:id="PARAM_ENABLEMENT.C_RX_SAER1_R_SENS_ID">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_RX_SAER2_R_SENS_ID</spirit:name>
      <spirit:displayName>Ch2</spirit:displayName>
      <spirit:value spirit:format="bitString" spirit:resolve="user" spirit:id="PARAM_VALUE.C_RX_SAER2_R_SENS_ID" spirit:choiceRef="choice_pairs_4c98ecdc" spirit:bitStringLength="3">&quot;000&quot;</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="generated" xilinx:id="PARAM_ENABLEMENT.C_RX_SAER2_R_SENS_ID">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_RX_SAER3_R_SENS_ID</spirit:name>
      <spirit:displayName>Ch3</spirit:displayName>
      <spirit:value spirit:format="bitString" spirit:resolve="user" spirit:id="PARAM_VALUE.C_RX_SAER3_R_SENS_ID" spirit:choiceRef="choice_pairs_4c98ecdc" spirit:bitStringLength="3">&quot;000&quot;</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="generated" xilinx:id="PARAM_ENABLEMENT.C_RX_SAER3_R_SENS_ID">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_RX_PAER_A_SENS_ID</spirit:name>
      <spirit:displayName>Aux port sensor type</spirit:displayName>
      <spirit:value spirit:format="bitString" spirit:resolve="user" spirit:id="PARAM_VALUE.C_RX_PAER_A_SENS_ID" spirit:choiceRef="choice_pairs_4c98ecdc" spirit:bitStringLength="3">&quot;001&quot;</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="generated" xilinx:id="PARAM_ENABLEMENT.C_RX_PAER_A_SENS_ID">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_RX_SAER0_A_SENS_ID</spirit:name>
      <spirit:displayName>Ch0</spirit:displayName>
      <spirit:value spirit:format="bitString" spirit:resolve="user" spirit:id="PARAM_VALUE.C_RX_SAER0_A_SENS_ID" spirit:choiceRef="choice_pairs_4c98ecdc" spirit:bitStringLength="3">&quot;001&quot;</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="generated" xilinx:id="PARAM_ENABLEMENT.C_RX_SAER0_A_SENS_ID">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_RX_SAER1_A_SENS_ID</spirit:name>
      <spirit:displayName>Ch1</spirit:displayName>
      <spirit:value spirit:format="bitString" spirit:resolve="user" spirit:id="PARAM_VALUE.C_RX_SAER1_A_SENS_ID" spirit:choiceRef="choice_pairs_4c98ecdc" spirit:bitStringLength="3">&quot;001&quot;</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="generated" xilinx:id="PARAM_ENABLEMENT.C_RX_SAER1_A_SENS_ID">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_RX_SAER2_A_SENS_ID</spirit:name>
      <spirit:displayName>Ch2</spirit:displayName>
      <spirit:value spirit:format="bitString" spirit:resolve="user" spirit:id="PARAM_VALUE.C_RX_SAER2_A_SENS_ID" spirit:choiceRef="choice_pairs_4c98ecdc" spirit:bitStringLength="3">&quot;001&quot;</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="generated" xilinx:id="PARAM_ENABLEMENT.C_RX_SAER2_A_SENS_ID">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_RX_SAER3_A_SENS_ID</spirit:name>
      <spirit:displayName>Ch3</spirit:displayName>
      <spirit:value spirit:format="bitString" spirit:resolve="user" spirit:id="PARAM_VALUE.C_RX_SAER3_A_SENS_ID" spirit:choiceRef="choice_pairs_4c98ecdc" spirit:bitStringLength="3">&quot;001&quot;</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="generated" xilinx:id="PARAM_ENABLEMENT.C_RX_SAER3_A_SENS_ID">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_HAS_DEFAULT_LOOPBACK</spirit:name>
      <spirit:displayName>Default loopback settings ports</spirit:displayName>
      <spirit:value spirit:format="bool" spirit:resolve="user" spirit:id="PARAM_VALUE.C_HAS_DEFAULT_LOOPBACK">true</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_GTP_DSIZE</spirit:name>
      <spirit:displayName>Port Data Size</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_GTP_DSIZE" spirit:choiceRef="choice_list_07c83d4f">16</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:id="PARAM_ENABLEMENT.C_GTP_DSIZE">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_SIM_TIME_COMPRESSION</spirit:name>
      <spirit:displayName>Simulation Time Compression</spirit:displayName>
      <spirit:value spirit:format="bool" spirit:resolve="user" spirit:id="PARAM_VALUE.C_SIM_TIME_COMPRESSION">false</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_RX_L_HAS_PAER</spirit:name>
      <spirit:displayName>PAER LEFT RX</spirit:displayName>
      <spirit:value spirit:format="bool" spirit:resolve="user" spirit:id="PARAM_VALUE.C_RX_L_HAS_PAER">true</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_RX_R_HAS_PAER</spirit:name>
      <spirit:displayName>PAER RIGHT RX</spirit:displayName>
      <spirit:value spirit:format="bool" spirit:resolve="user" spirit:id="PARAM_VALUE.C_RX_R_HAS_PAER">true</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_RX_A_HAS_PAER</spirit:name>
      <spirit:displayName>PAER AUX RX</spirit:displayName>
      <spirit:value spirit:format="bool" spirit:resolve="user" spirit:id="PARAM_VALUE.C_RX_A_HAS_PAER">true</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_RX_L_HAS_HSSAER</spirit:name>
      <spirit:displayName>HSSAER LEFT RX</spirit:displayName>
      <spirit:value spirit:format="bool" spirit:resolve="user" spirit:id="PARAM_VALUE.C_RX_L_HAS_HSSAER">true</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_RX_R_HAS_HSSAER</spirit:name>
      <spirit:displayName>HSSAER RIGHT RX</spirit:displayName>
      <spirit:value spirit:format="bool" spirit:resolve="user" spirit:id="PARAM_VALUE.C_RX_R_HAS_HSSAER">true</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_RX_A_HAS_HSSAER</spirit:name>
      <spirit:displayName>HSSAER AUX RX</spirit:displayName>
      <spirit:value spirit:format="bool" spirit:resolve="user" spirit:id="PARAM_VALUE.C_RX_A_HAS_HSSAER">true</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_RX_L_HAS_GTP</spirit:name>
      <spirit:displayName>Left RX</spirit:displayName>
      <spirit:value spirit:format="bool" spirit:resolve="user" spirit:id="PARAM_VALUE.C_RX_L_HAS_GTP">true</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_RX_R_HAS_GTP</spirit:name>
      <spirit:displayName>Right RX</spirit:displayName>
      <spirit:value spirit:format="bool" spirit:resolve="user" spirit:id="PARAM_VALUE.C_RX_R_HAS_GTP">true</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_RX_A_HAS_GTP</spirit:name>
      <spirit:displayName>Aux RX</spirit:displayName>
      <spirit:value spirit:format="bool" spirit:resolve="user" spirit:id="PARAM_VALUE.C_RX_A_HAS_GTP">true</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_RX_L_HAS_SPNNLNK</spirit:name>
      <spirit:displayName>SPINNAKER LEFT RX</spirit:displayName>
      <spirit:value spirit:format="bool" spirit:resolve="user" spirit:id="PARAM_VALUE.C_RX_L_HAS_SPNNLNK">true</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_RX_R_HAS_SPNNLNK</spirit:name>
      <spirit:displayName>SPINNAKER RIGHT RX</spirit:displayName>
      <spirit:value spirit:format="bool" spirit:resolve="user" spirit:id="PARAM_VALUE.C_RX_R_HAS_SPNNLNK">true</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_RX_A_HAS_SPNNLNK</spirit:name>
      <spirit:displayName>SPINNAKER AUX RX</spirit:displayName>
      <spirit:value spirit:format="bool" spirit:resolve="user" spirit:id="PARAM_VALUE.C_RX_A_HAS_SPNNLNK">true</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_RX_L_INTERCEPTION</spirit:name>
      <spirit:displayName>LEFT RX Interception</spirit:displayName>
      <spirit:value spirit:format="bool" spirit:resolve="user" spirit:id="PARAM_VALUE.C_RX_L_INTERCEPTION">true</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_RX_R_INTERCEPTION</spirit:name>
      <spirit:displayName>RIGHT RX Interception</spirit:displayName>
      <spirit:value spirit:format="bool" spirit:resolve="user" spirit:id="PARAM_VALUE.C_RX_R_INTERCEPTION">true</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_RX_A_INTERCEPTION</spirit:name>
      <spirit:displayName>AUX RX Interception</spirit:displayName>
      <spirit:value spirit:format="bool" spirit:resolve="user" spirit:id="PARAM_VALUE.C_RX_A_INTERCEPTION">true</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_GTP_RXUSRCLK2_PERIOD_PS</spirit:name>
      <spirit:displayName>RXUSRCLK2 Period (ps)</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_GTP_RXUSRCLK2_PERIOD_PS">6400</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="generated" xilinx:id="PARAM_ENABLEMENT.C_GTP_RXUSRCLK2_PERIOD_PS">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_GTP_TXUSRCLK2_PERIOD_PS</spirit:name>
      <spirit:displayName>TXUSRCLK2 Period (ps)</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_GTP_TXUSRCLK2_PERIOD_PS">6400</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="generated" xilinx:id="PARAM_ENABLEMENT.C_GTP_TXUSRCLK2_PERIOD_PS">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_SYSCLK_PERIOD_PS</spirit:name>
      <spirit:displayName>Core clock period (ps)</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_SYSCLK_PERIOD_PS">10000</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_FPGA_FAM</spirit:name>
      <spirit:displayName>FPGA Family</spirit:displayName>
      <spirit:value spirit:resolve="user" spirit:id="PARAM_VALUE.C_FPGA_FAM" spirit:choiceRef="choice_list_28fbf084">zynquplus</spirit:value>
    </spirit:parameter>
  </spirit:parameters>
  <spirit:vendorExtensions>
    <xilinx:coreExtensions>
      <xilinx:supportedFamilies>
        <xilinx:family xilinx:lifeCycle="Production">zynq</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Production">zynquplus</xilinx:family>
      </xilinx:supportedFamilies>
      <xilinx:taxonomies>
        <xilinx:taxonomy>/IIT/Interfaces</xilinx:taxonomy>
        <xilinx:taxonomy>/UserIP</xilinx:taxonomy>
      </xilinx:taxonomies>
      <xilinx:displayName>HPU Core</xilinx:displayName>
      <xilinx:definitionSource>package_project</xilinx:definitionSource>
      <xilinx:xpmLibraries>
        <xilinx:xpmLibrary>XPM_CDC</xilinx:xpmLibrary>
        <xilinx:xpmLibrary>XPM_MEMORY</xilinx:xpmLibrary>
      </xilinx:xpmLibraries>
      <xilinx:vendorDisplayName>Istituto Italiano di Tecnologia</xilinx:vendorDisplayName>
      <xilinx:vendorURL>http://www.iit.it</xilinx:vendorURL>
      <xilinx:coreRevision>19</xilinx:coreRevision>
      <xilinx:coreCreationDateTime>2024-07-29T12:43:02Z</xilinx:coreCreationDateTime>
      <xilinx:tags>
        <xilinx:tag xilinx:name="ui.data.coregen.df@3e94cb16_ARCHIVE_LOCATION">d:/Projects/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@755d4a91_ARCHIVE_LOCATION">d:/Projects/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@5b3e33c0_ARCHIVE_LOCATION">d:/Projects/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@7baabd2d_ARCHIVE_LOCATION">d:/Projects/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@34099fcf_ARCHIVE_LOCATION">d:/Projects/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@71fec46e_ARCHIVE_LOCATION">d:/Projects/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@561acf87_ARCHIVE_LOCATION">d:/Projects/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@4348f99a_ARCHIVE_LOCATION">d:/Projects/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@6b0c738_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@642ed826_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@698bdadc_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@43d12aff_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@1bda3a78_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@559ef822_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@9d11a83_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@49763421_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@38ca47a3_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@5d07ee7f_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@f7ef40b_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@23e92c1e_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@27ac6809_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@3b023c90_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@2d4ee1ca_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@5bcb362f_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@680688ca_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@5ee519f9_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@6bbec478_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@3f2884ed_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@710e9d2b_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@79be812a_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@36f6fc8d_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@7a547bd7_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@430a5b5b_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@3994e1a6_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@10bd58ca_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@20e1faf0_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@6c598cf2_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@66300a5e_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@3d9d651b_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@5dfddb60_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@685c3d50_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@78206388_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@7ae57fd5_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@42c9588f_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@25fc2fa5_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@598389db_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@71f9bc00_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@30d99900_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@37ef99d_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@2a086ead_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@34e8c7c4_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@5e5f74a7_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@668dc6e9_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@41ee6f49_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@7cec06cc_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@73df7411_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@33ebb12d_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@6a5c239e_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@1b3bfad8_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@72de78ea_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@452f13cf_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@50a5afa7_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@161865d9_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@3d39dd47_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@7d753f60_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@15e3d114_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@2c3b2b02_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@7ddf6beb_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@4244e4a6_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@d7a6e3d_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@7a2908db_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@733ba920_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@4895203e_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@3702dc69_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@2b6e52c_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@7fe0177_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@6e64cf39_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@46ecd2da_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@6157ea23_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@5eb68d03_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@1e687077_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@62dfbc9_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@59fa8b7c_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@309126f7_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@5e7ed9c8_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@79e0186f_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@44b999fe_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@46c436e5_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@4fcbd61d_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@41d2bd49_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@384e35b6_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@5b44a8c0_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@3173ba3_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@7de820d3_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@4db0ebd_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@52aab614_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@59e31aeb_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@2349a51b_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@d85cf7d_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@670c530e_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@10a122ed_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@2480161d_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@50dc1f5a_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@22aa923e_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@41836c6b_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@464cc162_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@5e099db9_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@38b0d3b3_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@6ed268b2_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@a87fab3_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@2fd39a5c_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@59daa474_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@36da584a_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@55ffab4_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@2511bf9a_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@2a5b3a0d_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@57dcba27_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@2552f191_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@18242efb_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@afa9c91_ARCHIVE_LOCATION">c:/Progetti/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@4c514de9_ARCHIVE_LOCATION">d:/Projects/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@56a98c1c_ARCHIVE_LOCATION">d:/Projects/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@3e42a0e0_ARCHIVE_LOCATION">d:/Projects/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@765a31b7_ARCHIVE_LOCATION">d:/Projects/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@baa2028_ARCHIVE_LOCATION">d:/Projects/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@5c134b9_ARCHIVE_LOCATION">d:/Projects/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@7a26b8db_ARCHIVE_LOCATION">d:/Projects/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@1f94bced_ARCHIVE_LOCATION">d:/Projects/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@53a1dc40_ARCHIVE_LOCATION">d:/Projects/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@71a65455_ARCHIVE_LOCATION">d:/Projects/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@7d95bcfc_ARCHIVE_LOCATION">d:/Projects/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@b7b9702_ARCHIVE_LOCATION">d:/Projects/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@3d759138_ARCHIVE_LOCATION">d:/Projects/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@56bce018_ARCHIVE_LOCATION">d:/Projects/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@1c297e04_ARCHIVE_LOCATION">d:/Projects/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@b07e933_ARCHIVE_LOCATION">d:/Projects/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@195d83e5_ARCHIVE_LOCATION">d:/Projects/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
        <xilinx:tag xilinx:name="ui.data.coregen.df@12b837ac_ARCHIVE_LOCATION">d:/Projects/UZCB/fpga-uzcb/src/Vivado_repo/HPU_Core</xilinx:tag>
      </xilinx:tags>
    </xilinx:coreExtensions>
    <xilinx:packagingInfo>
      <xilinx:xilinxVersion>2021.1</xilinx:xilinxVersion>
      <xilinx:checksum xilinx:scope="busInterfaces" xilinx:value="4f11aa76"/>
      <xilinx:checksum xilinx:scope="memoryMaps" xilinx:value="871a59ce"/>
      <xilinx:checksum xilinx:scope="fileGroups" xilinx:value="a2941ccc"/>
      <xilinx:checksum xilinx:scope="ports" xilinx:value="24ec1b2f"/>
      <xilinx:checksum xilinx:scope="hdlParameters" xilinx:value="af09a99f"/>
      <xilinx:checksum xilinx:scope="parameters" xilinx:value="9f656b89"/>
    </xilinx:packagingInfo>
  </spirit:vendorExtensions>
</spirit:component>
